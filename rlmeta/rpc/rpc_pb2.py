# -*- coding: utf-8 -*-

# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\trpc.proto\x12\nrlmeta.rpc\"l\n\nRpcRequest\x12\x10\n\x08\x66unction\x18\x01 \x01(\t\x12$\n\x04\x61rgs\x18\x02 \x01(\x0b\x32\x16.rlmeta.rpc.NestedData\x12&\n\x06kwargs\x18\x03 \x01(\x0b\x32\x16.rlmeta.rpc.NestedData\"]\n\x0bRpcResponse\x12,\n\x0creturn_value\x18\x01 \x01(\x0b\x32\x16.rlmeta.rpc.NestedData\x12 \n\x05\x65rror\x18\x02 \x01(\x0b\x32\x11.rlmeta.rpc.Error\">\n\x0cPyRpcRequest\x12\x10\n\x08\x66unction\x18\x01 \x01(\t\x12\x0c\n\x04\x61rgs\x18\x02 \x01(\x0c\x12\x0e\n\x06kwargs\x18\x03 \x01(\x0c\"4\n\rPyRpcResponse\x12\x14\n\x0creturn_value\x18\x01 \x01(\x0c\x12\r\n\x05\x65rror\x18\x02 \x01(\t\"\x14\n\x05\x45rror\x12\x0b\n\x03msg\x18\x01 \x01(\t\"\xa7\x01\n\x0bTensorProto\x12\x37\n\x0btensor_type\x18\x01 \x01(\x0e\x32\".rlmeta.rpc.TensorProto.TensorType\x12\r\n\x05\x64type\x18\x02 \x01(\x05\x12\x11\n\x05shape\x18\x03 \x03(\x03\x42\x02\x10\x01\x12\x0c\n\x04\x64\x61ta\x18\x04 \x01(\x0c\"/\n\nTensorType\x12\x0b\n\x07UNKNOWN\x10\x00\x12\t\n\x05NUMPY\x10\x01\x12\t\n\x05TORCH\x10\x02\"\xa8\x01\n\nSimpleData\x12\x12\n\x08\x62ool_val\x18\x01 \x01(\x08H\x00\x12\x11\n\x07int_val\x18\x02 \x01(\x03H\x00\x12\x13\n\tfloat_val\x18\x03 \x01(\x01H\x00\x12\x11\n\x07str_val\x18\x04 \x01(\tH\x00\x12\x13\n\tbytes_val\x18\x05 \x01(\x0cH\x00\x12-\n\ntensor_val\x18\x06 \x01(\x0b\x32\x17.rlmeta.rpc.TensorProtoH\x00\x42\x07\n\x05value\"2\n\nDataVector\x12$\n\x04\x64\x61ta\x18\x01 \x03(\x0b\x32\x16.rlmeta.rpc.NestedData\"{\n\x07\x44\x61taMap\x12+\n\x04\x64\x61ta\x18\x01 \x03(\x0b\x32\x1d.rlmeta.rpc.DataMap.DataEntry\x1a\x43\n\tDataEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12%\n\x05value\x18\x02 \x01(\x0b\x32\x16.rlmeta.rpc.NestedData:\x02\x38\x01\"\x8d\x01\n\nNestedData\x12%\n\x03val\x18\x01 \x01(\x0b\x32\x16.rlmeta.rpc.SimpleDataH\x00\x12%\n\x03vec\x18\x02 \x01(\x0b\x32\x16.rlmeta.rpc.DataVectorH\x00\x12\"\n\x03map\x18\x03 \x01(\x0b\x32\x13.rlmeta.rpc.DataMapH\x00\x42\r\n\x0bnested_data2\x8d\x01\n\x03Rpc\x12?\n\nRemoteCall\x12\x16.rlmeta.rpc.RpcRequest\x1a\x17.rlmeta.rpc.RpcResponse\"\x00\x12\x45\n\x0cPyRemoteCall\x12\x18.rlmeta.rpc.PyRpcRequest\x1a\x19.rlmeta.rpc.PyRpcResponse\"\x00')



_RPCREQUEST = DESCRIPTOR.message_types_by_name['RpcRequest']
_RPCRESPONSE = DESCRIPTOR.message_types_by_name['RpcResponse']
_PYRPCREQUEST = DESCRIPTOR.message_types_by_name['PyRpcRequest']
_PYRPCRESPONSE = DESCRIPTOR.message_types_by_name['PyRpcResponse']
_ERROR = DESCRIPTOR.message_types_by_name['Error']
_TENSORPROTO = DESCRIPTOR.message_types_by_name['TensorProto']
_SIMPLEDATA = DESCRIPTOR.message_types_by_name['SimpleData']
_DATAVECTOR = DESCRIPTOR.message_types_by_name['DataVector']
_DATAMAP = DESCRIPTOR.message_types_by_name['DataMap']
_DATAMAP_DATAENTRY = _DATAMAP.nested_types_by_name['DataEntry']
_NESTEDDATA = DESCRIPTOR.message_types_by_name['NestedData']
_TENSORPROTO_TENSORTYPE = _TENSORPROTO.enum_types_by_name['TensorType']
RpcRequest = _reflection.GeneratedProtocolMessageType('RpcRequest', (_message.Message,), {
  'DESCRIPTOR' : _RPCREQUEST,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.RpcRequest)
  })
_sym_db.RegisterMessage(RpcRequest)

RpcResponse = _reflection.GeneratedProtocolMessageType('RpcResponse', (_message.Message,), {
  'DESCRIPTOR' : _RPCRESPONSE,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.RpcResponse)
  })
_sym_db.RegisterMessage(RpcResponse)

PyRpcRequest = _reflection.GeneratedProtocolMessageType('PyRpcRequest', (_message.Message,), {
  'DESCRIPTOR' : _PYRPCREQUEST,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.PyRpcRequest)
  })
_sym_db.RegisterMessage(PyRpcRequest)

PyRpcResponse = _reflection.GeneratedProtocolMessageType('PyRpcResponse', (_message.Message,), {
  'DESCRIPTOR' : _PYRPCRESPONSE,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.PyRpcResponse)
  })
_sym_db.RegisterMessage(PyRpcResponse)

Error = _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), {
  'DESCRIPTOR' : _ERROR,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.Error)
  })
_sym_db.RegisterMessage(Error)

TensorProto = _reflection.GeneratedProtocolMessageType('TensorProto', (_message.Message,), {
  'DESCRIPTOR' : _TENSORPROTO,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.TensorProto)
  })
_sym_db.RegisterMessage(TensorProto)

SimpleData = _reflection.GeneratedProtocolMessageType('SimpleData', (_message.Message,), {
  'DESCRIPTOR' : _SIMPLEDATA,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.SimpleData)
  })
_sym_db.RegisterMessage(SimpleData)

DataVector = _reflection.GeneratedProtocolMessageType('DataVector', (_message.Message,), {
  'DESCRIPTOR' : _DATAVECTOR,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.DataVector)
  })
_sym_db.RegisterMessage(DataVector)

DataMap = _reflection.GeneratedProtocolMessageType('DataMap', (_message.Message,), {

  'DataEntry' : _reflection.GeneratedProtocolMessageType('DataEntry', (_message.Message,), {
    'DESCRIPTOR' : _DATAMAP_DATAENTRY,
    '__module__' : 'rpc_pb2'
    # @@protoc_insertion_point(class_scope:rlmeta.rpc.DataMap.DataEntry)
    })
  ,
  'DESCRIPTOR' : _DATAMAP,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.DataMap)
  })
_sym_db.RegisterMessage(DataMap)
_sym_db.RegisterMessage(DataMap.DataEntry)

NestedData = _reflection.GeneratedProtocolMessageType('NestedData', (_message.Message,), {
  'DESCRIPTOR' : _NESTEDDATA,
  '__module__' : 'rpc_pb2'
  # @@protoc_insertion_point(class_scope:rlmeta.rpc.NestedData)
  })
_sym_db.RegisterMessage(NestedData)

_RPC = DESCRIPTOR.services_by_name['Rpc']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _TENSORPROTO.fields_by_name['shape']._options = None
  _TENSORPROTO.fields_by_name['shape']._serialized_options = b'\020\001'
  _DATAMAP_DATAENTRY._options = None
  _DATAMAP_DATAENTRY._serialized_options = b'8\001'
  _RPCREQUEST._serialized_start=25
  _RPCREQUEST._serialized_end=133
  _RPCRESPONSE._serialized_start=135
  _RPCRESPONSE._serialized_end=228
  _PYRPCREQUEST._serialized_start=230
  _PYRPCREQUEST._serialized_end=292
  _PYRPCRESPONSE._serialized_start=294
  _PYRPCRESPONSE._serialized_end=346
  _ERROR._serialized_start=348
  _ERROR._serialized_end=368
  _TENSORPROTO._serialized_start=371
  _TENSORPROTO._serialized_end=538
  _TENSORPROTO_TENSORTYPE._serialized_start=491
  _TENSORPROTO_TENSORTYPE._serialized_end=538
  _SIMPLEDATA._serialized_start=541
  _SIMPLEDATA._serialized_end=709
  _DATAVECTOR._serialized_start=711
  _DATAVECTOR._serialized_end=761
  _DATAMAP._serialized_start=763
  _DATAMAP._serialized_end=886
  _DATAMAP_DATAENTRY._serialized_start=819
  _DATAMAP_DATAENTRY._serialized_end=886
  _NESTEDDATA._serialized_start=889
  _NESTEDDATA._serialized_end=1030
  _RPC._serialized_start=1033
  _RPC._serialized_end=1174
# @@protoc_insertion_point(module_scope)
